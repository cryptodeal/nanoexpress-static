'use strict';

var fs = require('fs');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

const mimes = {
  '3gp': 'video/3gpp',
  a: 'application/octet-stream',
  ai: 'application/postscript',
  aif: 'audio/x-aiff',
  aiff: 'audio/x-aiff',
  asc: 'application/pgp-signature',
  asf: 'video/x-ms-asf',
  asm: 'text/x-asm',
  asx: 'video/x-ms-asf',
  atom: 'application/atom+xml',
  au: 'audio/basic',
  avi: 'video/x-msvideo',
  bat: 'application/x-msdownload',
  bin: 'application/octet-stream',
  bmp: 'image/bmp',
  bz2: 'application/x-bzip2',
  c: 'text/x-c',
  cab: 'application/vnd.ms-cab-compressed',
  cc: 'text/x-c',
  chm: 'application/vnd.ms-htmlhelp',
  class: 'application/octet-stream',
  com: 'application/x-msdownload',
  conf: 'text/plain',
  cpp: 'text/x-c',
  crt: 'application/x-x509-ca-cert',
  css: 'text/css',
  csv: 'text/csv',
  cxx: 'text/x-c',
  deb: 'application/x-debian-package',
  der: 'application/x-x509-ca-cert',
  diff: 'text/x-diff',
  djv: 'image/vnd.djvu',
  djvu: 'image/vnd.djvu',
  dll: 'application/x-msdownload',
  dmg: 'application/octet-stream',
  doc: 'application/msword',
  dot: 'application/msword',
  dtd: 'application/xml-dtd',
  dvi: 'application/x-dvi',
  ear: 'application/java-archive',
  eml: 'message/rfc822',
  eps: 'application/postscript',
  exe: 'application/x-msdownload',
  f: 'text/x-fortran',
  f77: 'text/x-fortran',
  f90: 'text/x-fortran',
  flv: 'video/x-flv',
  for: 'text/x-fortran',
  gem: 'application/octet-stream',
  gemspec: 'text/x-script.ruby',
  gif: 'image/gif',
  gz: 'application/x-gzip',
  h: 'text/x-c',
  hh: 'text/x-c',
  htm: 'text/html',
  html: 'text/html',
  ico: 'image/vnd.microsoft.icon',
  ics: 'text/calendar',
  ifb: 'text/calendar',
  iso: 'application/octet-stream',
  jar: 'application/java-archive',
  java: 'text/x-java-source',
  jnlp: 'application/x-java-jnlp-file',
  jpeg: 'image/jpeg',
  jpg: 'image/jpeg',
  js: 'application/javascript',
  json: 'application/json',
  log: 'text/plain',
  m3u: 'audio/x-mpegurl',
  m4v: 'video/mp4',
  man: 'text/troff',
  mathml: 'application/mathml+xml',
  mbox: 'application/mbox',
  mdoc: 'text/troff',
  me: 'text/troff',
  mid: 'audio/midi',
  midi: 'audio/midi',
  mime: 'message/rfc822',
  mjs: 'application/javascript',
  mml: 'application/mathml+xml',
  mng: 'video/x-mng',
  mov: 'video/quicktime',
  mp3: 'audio/mpeg',
  mp4: 'video/mp4',
  mp4v: 'video/mp4',
  mpeg: 'video/mpeg',
  mpg: 'video/mpeg',
  ms: 'text/troff',
  msi: 'application/x-msdownload',
  odp: 'application/vnd.oasis.opendocument.presentation',
  ods: 'application/vnd.oasis.opendocument.spreadsheet',
  odt: 'application/vnd.oasis.opendocument.text',
  ogg: 'application/ogg',
  p: 'text/x-pascal',
  pas: 'text/x-pascal',
  pbm: 'image/x-portable-bitmap',
  pdf: 'application/pdf',
  pem: 'application/x-x509-ca-cert',
  pgm: 'image/x-portable-graymap',
  pgp: 'application/pgp-encrypted',
  pkg: 'application/octet-stream',
  pl: 'text/x-script.perl',
  pm: 'text/x-script.perl-module',
  png: 'image/png',
  pnm: 'image/x-portable-anymap',
  ppm: 'image/x-portable-pixmap',
  pps: 'application/vnd.ms-powerpoint',
  ppt: 'application/vnd.ms-powerpoint',
  ps: 'application/postscript',
  psd: 'image/vnd.adobe.photoshop',
  py: 'text/x-script.python',
  qt: 'video/quicktime',
  ra: 'audio/x-pn-realaudio',
  rake: 'text/x-script.ruby',
  ram: 'audio/x-pn-realaudio',
  rar: 'application/x-rar-compressed',
  rb: 'text/x-script.ruby',
  rdf: 'application/rdf+xml',
  roff: 'text/troff',
  rpm: 'application/x-redhat-package-manager',
  rss: 'application/rss+xml',
  rtf: 'application/rtf',
  ru: 'text/x-script.ruby',
  s: 'text/x-asm',
  sgm: 'text/sgml',
  sgml: 'text/sgml',
  sh: 'application/x-sh',
  sig: 'application/pgp-signature',
  snd: 'audio/basic',
  so: 'application/octet-stream',
  svg: 'image/svg+xml',
  svgz: 'image/svg+xml',
  swf: 'application/x-shockwave-flash',
  t: 'text/troff',
  tar: 'application/x-tar',
  tbz: 'application/x-bzip-compressed-tar',
  tcl: 'application/x-tcl',
  tex: 'application/x-tex',
  texi: 'application/x-texinfo',
  texinfo: 'application/x-texinfo',
  text: 'text/plain',
  tif: 'image/tiff',
  tiff: 'image/tiff',
  torrent: 'application/x-bittorrent',
  tr: 'text/troff',
  txt: 'text/plain',
  vcf: 'text/x-vcard',
  vcs: 'text/x-vcalendar',
  vrml: 'model/vrml',
  war: 'application/java-archive',
  wav: 'audio/x-wav',
  wma: 'audio/x-ms-wma',
  wmv: 'video/x-ms-wmv',
  wmx: 'video/x-ms-wmx',
  wrl: 'model/vrml',
  wsdl: 'application/wsdl+xml',
  xbm: 'image/x-xbitmap',
  xhtml: 'application/xhtml+xml',
  xls: 'application/vnd.ms-excel',
  xml: 'application/xml',
  xpm: 'image/x-xpixmap',
  xsl: 'application/xml',
  xslt: 'application/xslt+xml',
  yaml: 'text/yaml',
  yml: 'text/yaml',
  zip: 'application/zip',
  default: 'text/html'
};

const getMime = (path) => {
  const i = path.lastIndexOf('.');
  return mimes[path.substr(i + 1).toLowerCase()];
};

/* eslint-disable eslint-comments/disable-enable-pair, @typescript-eslint/no-use-before-define */

function handleDirectory(dirPath) {
  if (fs__default['default'].statSync(dirPath).isDirectory()) {
    return {
      files: precacheStatic(dirPath),
      reduce: true
    };
  }
  return undefined;
}

function precacheFolder(dirPath) {
  try {
    const files = fs__default['default'].readdirSync(dirPath);

    const handledFiles = files.map((file) => handleItem(dirPath, file));

    return handledFiles;
  } catch (e) {
    throw new Error('[nanoexpress::Middlewares]: {static} Precache failed', e);
  }
}

function handleItem(filePath, file) {
  const resolved = path__default['default'].join(filePath, file);

  const isDirectory = handleDirectory(resolved);
  if (isDirectory !== undefined) {
    return isDirectory;
  }

  const streamable = getMime(resolved);

  return {
    file,
    resolved,
    streamable,
    raw: streamable ? null : fs__default['default'].readFileSync(resolved)
  };
}

function mergeCaches(cache) {
  return cache.reduce((list, item) => {
    if (item.reduce) {
      list = list.concat(item.files);
    } else {
      list.push(item);
    }
    return list;
  }, []);
}

function precacheStatic(dirPath) {
  return mergeCaches(precacheFolder(dirPath));
}

function staticMiddleware(path, config) {
  // Reduce risk of importing files out-of-folder
  if (path.length > 4 && path.charAt(path.length) !== '/') {
    path += '/';
  }

  const items = precacheStatic(path);

  return async function handleServe(req, res) {
    let fileName = req.path;

    if (config.forcePretty || (config.addPrettyUrl && fileName === '/')) {
      fileName += config.index;
    }

    // eslint-disable-next-line no-restricted-syntax
    for (const { streamable, resolved, raw } of items) {
      if (resolved.endsWith(fileName)) {
        if (streamable) {
          return res.sendFile(resolved, config.lastModified, config.compressed);
        }
        return res.end(raw);
      }
    }

    return undefined;
  };
}

const resAbortHandler = '___$HttpResponseAbortHandler';
function staticMiddleware$1(path, config) {
  // eslint-disable-next-line consistent-return
  return async function handleServe(req, res) {
    if (!res[resAbortHandler]) {
      res.onAborted(() => {
        res.aborted = true;
      });
      res[resAbortHandler] = true;
    }

    let url = req.path;

    if (config.forcePretty || (config.addPrettyUrl && url === '/')) {
      url += config.index;
    }

    const filePath = path + url;

    const stat = await fs.promises.stat(filePath).catch(() => null);

    if (stat && !res.aborted) {
      return res.sendFile(filePath, config.lastModified, config.compressed);
    }
  };
}

/**
 * Serves file
 * @param {String} path Path of folder
 * @param {object} options Options of serve
 * @param {String=} options.mode Serve mode, has two values - Cached and Live.
 * Cached gives better performance, but on refresh gives cached result
 * and uses more RAM.
 * Live mode uses less memory usage, on request responses last version
 * but on high-load applicatins may reduces performance
 *
 * @param {Boolean=} options.index Index filename
 * @param {Boolean=} options.forcePretty Force appending index-file
 * path even path isn't as root
 *
 * @param {Boolean=} options.addPrettyUrl Enable pretty url
 * by auto-appending index-file, so works `/` like `/index.html`
 *
 * @param {Boolean=} options.lastModified Enable last-modified check,
 * if file not modified, returns empty request with 304 status
 * @param {Boolean=} options.compressed Compress response/response streams
 * @default options.mode cached `Uses cached mode by default`
 * @default options.index index.html `Default index.html as index-file`
 * @default options.forcePretty false `Disabled by default`
 * @default options.addPrettyUrl true `Enabled by default`
 * @default options.lastModified true `Enabled by default`
 * @default options.compressed true `Enabled by default`
 *
 * @example // If mode is `cached`
 * app.use(await staticServe('./assets/static'))
 * @example // If mode is `live`
 * app.use(staticServe('./assets/static'))
 */
function staticServe(path, config = {}) {
  config = {
    mode: 'cached',
    index: 'index.html',
    forcePretty: false,
    addPrettyUrl: true,
    lastModified: true,
    compressed: true,
    ...config
  };

  if (config.mode === 'live') {
    return staticMiddleware$1(path, config);
  }
  if (config.mode === 'cached') {
    return staticMiddleware(path, config);
  }
  throw new Error('[nanoexpress::Middlewares]: {static} Unknown mode');
}

module.exports = staticServe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
